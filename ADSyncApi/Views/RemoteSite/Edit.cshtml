@using Newtonsoft.Json;

@model ADSync.Data.Models.RemoteSite

@{
    ViewBag.Title = "Remote Site Configuration";
    var isEditing = (Model != null && Model.Id != null);
    string Operation = (isEditing) ? "Edit" : "Create";
    string siteDomains = "[]";
    string siteDomainList = "";
    if (isEditing)
    {
        siteDomains = JsonConvert.SerializeObject(Model.SiteDomains);
        siteDomainList = string.Join("\n", Model.SiteDomains);
    }
}

@using (Html.BeginForm("Edit", "RemoteSite", FormMethod.Post, new { @id="EditForm" }))
{
    @Html.AntiForgeryToken()

    <div class="panel panel-primary" style="margin-top:20px;">
        <div class="panel-title panel-heading">
            @ViewBag.Title - @Operation
        </div>
        <div class="panel-body">
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)
                <div class="form-group control">
                    <div class="col-md-12">
                        <button type="submit" class="btn btn-default control"><span class="glyphicon glyphicon-floppy-disk"></span> Save</button>
                        @if (isEditing)
                        {
                            <button id="btnDelete" type="button" class="btn btn-default control"><span class="glyphicon glyphicon-trash"></span> Delete</button>
                        }
                        <button id="btnCancel" type="button" class="btn btn-default control"><span class="glyphicon glyphicon-remove"></span> Cancel</button>
                    </div>
                </div>
                @if (ViewBag.Error != null)
                {
                    <div class="alert alert-danger alert-dismissible" role="alert">
                        <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        @ViewBag.Error
                    </div>
                }
                <div class="form-group">
                    @Html.LabelFor(model => model.SiteDomains, htmlAttributes: new { @for="SiteDomainsList", @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        @Html.Hidden("SiteDomains", siteDomains)
                        <textarea name="SiteDomainsList" id="SiteDomainsList" rows="3" class="form-control">@siteDomainList</textarea>
                        (Enter one or more domain names/UPN suffixes, each on a separate line)
                        @Html.ValidationMessageFor(model => model.SiteDomains, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SiteType, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-5">
                        @Html.EnumDropDownListFor(model => model.SiteType, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SiteType, "", new { @class = "text-danger" })
                    </div>
                </div>

                @if (isEditing)
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.ApiKey, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-5">
                            <div class="input-group">
                                @Html.EditorFor(model => model.ApiKey, new { htmlAttributes = new { @class = "form-control", @style = "max-width: none" } })
                                <span title="Click to copy API key to the clipboard" class="glyphicon glyphicon-copy input-group-addon" id="btnCopyApiKey"></span>
                            </div>
                            @Html.ValidationMessageFor(model => model.ApiKey, "", new { @class = "text-danger" })
                            <label for="ResetApiKey">Reset Key on Save</label> @Html.CheckBox("ResetApiKey", new { @id = "ResetApiKey" })
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
@section styles {
    <style type="text/css">
        #btnCopyApiKey {
            cursor: pointer;
        }
    </style>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(function () {
            var isEditing = @isEditing.ToString().ToLower();

            $("#ApiKey").on("focus", function () {
                setTimeout(function () {
                    $("#ApiKey").select();
                }, 100);
            });

            $("#btnCopyApiKey").on("click", function () {
                if (SiteUtil.Copy($("#ApiKey").val())) {
                    SiteUtil.ShowMessage("#btnCopyApiKey", "Key copied to clipboard");
                } else {
                    SiteUtil.ShowMessage("#btnCopyApiKey", "Key not copied to clipboard, your browser may not support this operation. Please Ctrl-C to copy.");
                    setTimeout(function () {
                        $("#ApiKey").select();
                    }, 100);
                }
            });

            $("#btnCancel").on("click", function() {
                location.href="/RemoteSite";
            });

            $("#btnDelete").on("click", function() {
                if (!confirm("Are you sure you want to delete this site?")) return;

                document.forms[1].action = "/RemoteSite/Delete";
                document.forms[1].submit();
            });
        });
    </script>
}
